import React, { useState, useEffect } from 'react'
import axios from 'axios';
import jwt_decode from "jwt-decode";
import { Route, Switch, useHistory } from 'react-router-dom';
import { DataNavDashboard } from '../../assets/data';
import SubNavDashboard from '../../components/navs/dashboard/sub';
import './style.css'
import { DatabaseAnggaranInsert, DatabaseAnggaranUpdate, DatabaseDataSekolahGet, DatabaseDataSekolahInsert, DatabaseDataSekolahUpdate, DatabseAnggaranGet, DatabaseVideoYoutubeGet, DatabaseVideoYoutubeInsert, DatabaseVideoYoutubeUpdate, } from './database';

const PageDashboard = () => {
    const [name, setName] = useState('');
    const [token, setToken] = useState('');
    const [expire, setExpire] = useState('');
    const [users, setUsers] = useState([]);
    const history = useHistory();

    useEffect(() => {
        refreshToken();
        getUsers();
    }, []);

    const refreshToken = async () => {
        try {
            const response = await axios.get('http://localhost:3210/token');
            setToken(response.data.accessToken);
            const decoded = jwt_decode(response.data.accessToken);
            setName(decoded.name);
            setExpire(decoded.exp);
        } catch (error) {
            if (error.response) {
                history.push("/");
            }
        }
    }

    const axiosJWT = axios.create();

    axiosJWT.interceptors.request.use(async (config) => {
        const currentDate = new Date();
        if (expire * 1000 < currentDate.getTime()) {
            const response = await axios.get('http://localhost:3210/token');
            config.headers.Authorization = `Bearer ${response.data.accessToken}`;
            setToken(response.data.accessToken);
            const decoded = jwt_decode(response.data.accessToken);
            setName(decoded.name);
            setExpire(decoded.exp);
        }
        return config;
    }, (error) => {
        return Promise.reject(error);
    });

    const getUsers = async () => {
        const response = await axiosJWT.get('http://localhost:3210/users', {
            headers: {
                Authorization: `Bearer ${token}`
            }
        });
        setUsers(response.data);
    }

    const Logout = async() => {
        try {
            await axios.delete('http://localhost:3210/logout')
            history.push('/')
        } catch (error) {
            console.log(error)
        }
    }

    return (
        <div>
            <nav className='nav-dashboard'>
            <div className='nav-dash-title'>
              <div className='nav-title'>
                <h3>SDN <span> Jatirahayu  </span> IV</h3>  
              </div>
              <div className='nav-title'>
                <h3>selamat datang:{name}</h3>
                <button  onClick={Logout} >keluar</button>
              </div>
              
            </div>
          </nav>
            <div className='dashboard-row'>
                <div className='nav-dash-menu'>
                    {DataNavDashboard.map((item, index) => {
                        return <SubNavDashboard item={item} key={index} />;
                    })}
                </div>
                <div className='dashboard-isi'>
                <button onClick={getUsers} className="button is-info">Get Users</button>
                    <table className="table is-striped is-fullwidth">
                        <thead>
                            <tr>
                                <th>No</th>
                                <th>Name</th>
                                <th>Email</th>
                            </tr>
                        </thead>
                        <tbody>
                            {users.map((user, index) => (
                                <tr key={user.id}>
                                    <td>{index + 1}</td>
                                    <td>{user.name}</td>
                                    <td>{user.email}</td>
                                </tr>
                            ))}
                        </tbody>
                    </table>
                    <Switch>
                    {/* Database Anggaran */}
                        <Route path="/dashboard/anggaran/get">
                            <DatabseAnggaranGet />
                        </Route>
                        <Route path="/dashboard/anggaran/add">
                            <DatabaseAnggaranInsert />
                        </Route>
                        <Route path="/dashboard/anggaran/update/:id">
                            <DatabaseAnggaranUpdate />
                        </Route>
                    {/* Database Data Sekolah */}
                        <Route path="/dashboard/data-sekolah/get">
                            <DatabaseDataSekolahGet/>
                        </Route>
                        <Route path="/dashboard/data-sekolah/add">
                            <DatabaseDataSekolahInsert />
                        </Route>
                        <Route path="/dashboard/data-sekolah/update/:id">
                            <DatabaseDataSekolahUpdate />
                        </Route>
                    {/* Database Data Sekolah */}
                        <Route path="/dashboard/video-youtube/get">
                            <DatabaseVideoYoutubeGet/>
                        </Route>
                        <Route path="/dashboard/video-youtube/add">
                            <DatabaseVideoYoutubeInsert />
                        </Route>
                        <Route path="/dashboard/video-youtube/update/:id">
                            <DatabaseVideoYoutubeUpdate />
                        </Route>
                    </Switch>
                </div>
            </div>
        </div>
    )
}

export default PageDashboard
